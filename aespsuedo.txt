function encrypt_file(file_path, key):
    chunk_size = 64 * 1024
    output_file = file_path + '.enc'

    backend = default_backend()
    iv = b'\x00' * 16  // You should use a secure random IV in practice

    file = open(file_path, 'rb')
    encrypted_file = open(output_file, 'wb')

    cipher = Cipher(AES(key), CFB(iv), backend=backend)
    encryptor = cipher.encryptor()y

    while True:
        chunk = file.read(chunk_size)
        if len(chunk) == 0:
            break

        padder = PKCS7(128).padder()
        padded_data = padder.update(chunk) + padder.finalize()
        encrypted_chunk = encryptor.update(padded_data)
        encrypted_file.write(encrypted_chunk)

    file.close()
    encrypted_file.close()

    return output_file


function decrypt_file(file_path, key):
    chunk_size = 64 * 1024
    output_file = file_path[:-4]  // Remove the '.enc' extension

    backend = default_backend()
    iv = b'\x00' * 16  // You should use the same IV used during encryption

    encrypted_file = open(file_path, 'rb')
    decrypted_file = open(output_file, 'wb')

    cipher = Cipher(AES(key), CFB(iv), backend=backend)
    decryptor = cipher.decryptor()

    while True:
        chunk = encrypted_file.read(chunk_size)
        if len(chunk) == 0:
            break

        decrypted_chunk = decryptor.update(chunk)
        unpadder = PKCS7(128).unpadder()
        unpadded_data = unpadder.update(decrypted_chunk) + unpadder.finalize()
        decrypted_file.write(unpadded_data)

    encrypted_file.close()
    decrypted_file.close()

    return output_file


// Set your encryption key (should be 16, 24, or 32 bytes long for AES-128, AES-192, or AES-256, respectively)
key = b'Sixteen byte key'

// Specify the file path of the file you want to encrypt and decrypt
file_path = '/Users/maninderkaur/Desktop/sources for paper/lorem ipsum/book.rtf'

// Encrypt the file and measure the time taken
start_time = current_time()
encrypted_file_path = encrypt_file(file_path, key)
encryption_time = current_time() - start_time

// Decrypt the file and measure the time taken
start_time = current_time()
decrypted_file_path = decrypt_file(encrypted_file_path, key)
decryption_time = current_time() - start_time

print("Encryption time: " + encryption_time + " seconds")
print("Decryption time: " + decryption_time + " seconds")
